{
  "tests": [
    {
      "name": "Bringing graders live tonight",
      "setup": "",
      "run": "echo \"We are bringing the autograder action configs live tonight, so you should see your repo update overnight with more info.\"",
      "input": "",
      "output": "",
      "comparison": "regex",
      "timeout": 10,
      "points": null
    },
    {
      "name": "Run npm install",
      "setup": "",
      "run": "npm install",
      "input": "",
      "output": "",
      "comparison": "included",
      "timeout": 10,
      "points": 10000
    },
    {
      "name": "package license set",
      "setup": "",
      "run": "cat package.json",
      "input": "",
      "output": "GPL-3.0-or-later",
      "comparison": "included",
      "timeout": 10,
      "points": 10000
    },
    {
      "name": "package author exists",
      "setup": "",
      "run": "cat package.json",
      "input": "",
      "output": "\"author\":",
      "comparison": "included",
      "timeout": 10,
      "points": 10000
    },
    {
      "name": "Task 01.0",
      "setup": "npm install",
      "run": "PORT=5555; (timeout --signal=SIGINT 5 node ./01/server.js; exit 0) & sleep 1s && curl -s http://localhost:${PORT}/app/ > test01-0.json && sleep 5s && if grep -q \"It works!\" test01-0.json; then echo \"TRUE\"; else echo \"FALSE\"; fi",
      "input": "",
      "output": "TRUE",
      "comparison": "included",
      "timeout": 10,
      "points": 15000
    },
    {
      "name": "Task 01.1",
      "setup": "",
      "run": "PORT=5555; MESSAGE=\"$(openssl rand -hex 4)\"; (timeout --signal=SIGINT 5 node ./01/server.js --port=${PORT} --message=${MESSAGE}; exit 0) & sleep 1s && curl -s http://localhost:${PORT}/app/ > test01-1.json && sleep 5s && if grep -q ${MESSAGE} test01-1.json; then echo \"TRUE\"; else echo \"FALSE\"; fi",
      "input": "",
      "output": "TRUE",
      "comparison": "included",
      "timeout": 10,
      "points": 15000
    },
    {
      "name": "Test 02.0",
      "setup": "",
      "run": "A=\"$(shuf -i 0-99 -n 1)\"; B=\"$(shuf -i 0-99 -n 1)\"; C=\"$(($A+$B))\"; TEST=$(node --eval \"const math = require('./02/math.js'); console.log(math.add(${A},${B}));\"); if [ $C -eq $TEST ]; then echo \"TRUE\"; else echo \"FALSE\"; fi",
      "input": "",
      "output": "TRUE",
      "comparison": "included",
      "timeout": 10,
      "points": 30000
    },
    {
      "name": "Test 03.0",
      "setup": "",
      "run": "PORT=5555; (timeout --signal=SIGINT 5 node ./03/server.js; exit 0) & sleep 1s && curl -s http://localhost:${PORT} > test03-0.html && sleep 5s && if grep -q \"My server works.\" test03-0.html; then echo \"TRUE\"; else echo \"FALSE\"; fi",
      "input": "",
      "output": "TRUE",
      "comparison": "included",
      "timeout": 10,
      "points": 15000
    },
    {
      "name": "Test 03.1",
      "setup": "",
      "run": "PORT=$(shuf -i 2000-65535 -n 1); (timeout --signal=SIGINT 5 node ./03/server.js --port=${PORT}; exit 0) & sleep 1s && curl -s http://localhost:${PORT} > test03-1.html && sleep 5s && if grep -q \"My server works.\" test03-1.html; then echo \"TRUE\"; else echo \"FALSE\"; fi",
      "input": "",
      "output": "TRUE",
      "comparison": "included",
      "timeout": 10,
      "points": 15000
    },
    {
      "name": "Test 04.0",
      "setup": "npm install better-sqlite3 && npm install",
      "run": "node --eval \"const db = require('./04/database.js');\"",
      "input": "",
      "output": "",
      "comparison": "included",
      "timeout": 10,
      "points": 10000
    },
    {
      "name": "Test 04.1",
      "setup": "",
      "run": "ls info.db",
      "input": "",
      "output": "info.db",
      "comparison": "included",
      "timeout": 10,
      "points": 10000
    },
    {
      "name": "Test 04.2",
      "setup": "",
      "run": "node --eval \"const db = require('./04/database.js'); const customertab = db.prepare('SELECT * FROM customers').columns(); console.log(customertab);\" > test04-1.txt && if grep -q \"table: 'customers',\" test04-1.txt; then echo \"TRUE\"; else echo \"FALSE\"; fi",
      "input": "",
      "output": "TRUE",
      "comparison": "included",
      "timeout": 10,
      "points": 10000
    }
  ]
}